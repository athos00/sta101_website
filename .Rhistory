filter(!is.na(Age)) %>%
mutate(best3squat_lbs = best3squat_kg * 2.20462) %>%
ggplot(aes(x = best3squat_lbs, color = sex))  +
geom_density() +
facet_wrap(~ Age) +
labs(title = "Distribution of best squat in lbs by age grouping and sex", y = "Density", x = "Best squat (lbs)")
ipf %>%
mutate(Age = ifelse(age < 40, "Under 40", "40 or older")) %>%
filter(!is.na(Age)) %>%
filter(best3squat_kg > 0 ) %>%
mutate(best3squat_lbs = best3squat_kg * 2.20462) %>%
ggplot(aes(x = best3squat_lbs, color = sex))  +
geom_density() +
facet_wrap(~ Age) +
labs(title = "Distribution of best squat in lbs by age grouping and sex", y = "Density", x = "Best squat (lbs)")
ipf3 = ipf2 %>%
mutate(best3deadlift_lbs = best3deadlift_kg * 2.20462) %>%
mutate(bodyweight_lbs = bodyweight_kg * 2.20462)
ipf3 %>%
ggplot(aes(x = bodyweight_lbs, y =best3deadlift_lbs)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = "Bodyweight (lbs)",  y = "Deadlift (lbs)", title = "Best deadlift by bodyweight")
ipf_deadlift = ipf %>%
mutate(best3deadlift_lbs = best3deadlift_kg * 2.20462) %>%
mutate(bodyweight_lbs = bodyweight_kg * 2.20462)
ipf3 %>%
ggplot(aes(x = bodyweight_lbs, y =best3deadlift_lbs)) +
geom_point() +
geom_smooth(method = 'lm') +
labs(x = "Bodyweight (lbs)",  y = "Deadlift (lbs)", title = "Best deadlift by bodyweight")
deadliftFit = linear_reg() %>%
set_engine("lm") %>%
fit(best3deadlift_lbs ~ bodyweight_lbs, data = ipf_deadlift)
tidy(deadliftFit)
glance(deadliftFit)
deadliftFit = linear_reg() %>%
set_engine("lm") %>%
fit(best3deadlift_lbs ~ bodyweight_lbs, data = ipf_deadlift)
tidy(deadliftFit)
glance(deadliftFit)
ipf_dope %>%
group_by(sex, doping_status) %>%
summarize(five_pct = quantile(best3squat_kg, 0.05),
fifty_pct = quantile(best3squat_kg, 0.5),
ninetyfive_pct = quantile(best3squat_kg, 0.95))
3 + 7 + 4 + 6 + 6 + 5 + 9 + 7 + 8 + 4 + 6
x = c(3, 7, 4, 6, 6, 5, 7, 7, 6, 3, 3)
sum(x)
length(x)
3 + 6 + 4 + 6 + 4 + 5 + 6 + 4 + 6 + 3 + #
3 + 6 + 4 + 6 + 4 + 5 + 6 + 4 + 6 + 3 + 3
3 + 6 + 4 + 6 + 4 + 5 + 6 + 4 + 6 + 3 + 3
3 + 6 + 4 + 6 + 4 +5 + 6 + 5 + 6 + 3 + 3
x = c(3, 6, 4, 6, 4, 5, 6, 5, 6, 3, 3)
sum(x)
length(x)
ipf %>%
mutate(Age = ifelse(age < 40, "Under 40", "40 or older")) %>%
filter(!is.na(Age)) %>%
filter(best3squat_kg > 0 ) %>%
mutate(best3squat_lbs = best3squat_kg * 2.20462) %>%
ggplot(aes(x = best3squat_lbs, color = sex))  +
geom_density() +
facet_wrap(~ Age) +
labs(title = "Distribution of best squat in lbs by age grouping and sex", y = "Density", x = "Best squat (lbs)")
ggsave("~/Desktop/ipf-plot.png")
library(tidyverse)
library(tidymodels)
ipf_lifts <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-08/ipf_lifts.csv")
ipf
ipf <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-08/ipf_lifts.csv")
ipf
write_csv(ipf, "/data/ipf_lifts.csv")
write_csv(ipf, "~/Desktop/ipf_lifts.csv")
stop_server()
build_site()
serve_site()
ipf = read_csv("https://sta101.github.io/static/labs/data/ipf_lifts.csv")
stop_server()
stop_server()
build_site()
serve_site()
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
#DELL = getTicker("DELL")
#GTW = getTicker("GTW")
IBM = getTicker("IBM")
ORCL = getTicker("ORCL")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
left_join(ADBE, by = "date") %>%
left_join(AMD, by = "date") %>%
#left_join(DELL, by = "date") %>%
#left_join(GTW, by = "date") %>%
left_join(IBM, by = "date") %>%
left_join(ORCL, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open),
ADBE_log_return = log(ADBE.Close / ADBE.Open),
AMD_log_return = log(AMD.Close / AMD.Open),
#DELL_log_return = log(DELL.Close, DELL.Open),
#GTW_log_return = log(GTW.Close, GTW.Open),
IBM_log_return = log(IBM.Close, IBM.Open),
ORCL_log_return = log(ORCL.Close, ORCL.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return,
ADBE_log_return,
AMD_log_return,
#DELL_log_return,
#GTW_log_return,
IBM_log_return,
ORCL_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
cor(stocks$AAPL_log_return, stocks$ADP_log_return)
cor(stocks[-1])
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
MSFT
library(tidyquant)
startDate = '2020-01-01'
endDate = "2021-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
#DELL = getTicker("DELL")
#GTW = getTicker("GTW")
IBM = getTicker("IBM")
ORCL = getTicker("ORCL")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
left_join(ADBE, by = "date") %>%
left_join(AMD, by = "date") %>%
#left_join(DELL, by = "date") %>%
#left_join(GTW, by = "date") %>%
left_join(IBM, by = "date") %>%
left_join(ORCL, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open),
ADBE_log_return = log(ADBE.Close / ADBE.Open),
AMD_log_return = log(AMD.Close / AMD.Open),
#DELL_log_return = log(DELL.Close, DELL.Open),
#GTW_log_return = log(GTW.Close, GTW.Open),
IBM_log_return = log(IBM.Close, IBM.Open),
ORCL_log_return = log(ORCL.Close, ORCL.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return,
ADBE_log_return,
AMD_log_return,
#DELL_log_return,
#GTW_log_return,
IBM_log_return,
ORCL_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
cor(stocks$AAPL_log_return, stocks$ADP_log_return)
cor(stocks[-1])
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
MSFT
stocks
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open))
stocks
names(stocks)
write_csv(stocks, "~Desktop/stocks1.csv")
write_csv(stocks, "~/Desktop/stocks1.csv")
stocks1 = read_csv("/data/stocks1.csv")
stocks1 = read_csv("/static/appex/data/stocks1.csv")
stocks1 = read_csv("/static/appex/data/stocks1.csv")
stocks1 = read_csv("~/Desktop/teaching/sta101/static/static/appex/data/stocks1.csv")
stocks = read_csv("~/Desktop/teaching/sta101/static/static/appex/data/stocks1.csv")
stocks
stocks %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point()
stocks %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
geom_smooth(method = 'lm')
stocks %>%
sample(5)
sample(stocks, 5)
slice(stocks, 5)
?slice
slice(stocks, 1:20)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
geom_smooth(method = 'lm') +
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
geom_smooth(method = 'lm')
stocks %>%
slice(1:20) %>%
ggplot(aes(x = AAPL.Open, y = MSFT.Open)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
labs(x = "MSFT Open")
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
labs(x = "MSFT Open", y = "AAPL Open")
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
geom_smooth(method = 'lm', se = FALSE) +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw()
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw()
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_smooth(method = 'lm', se = F)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = 0)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = 0, color = 'red')
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5, color = 'red')
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5, color = 'red')
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5)
stocks[1,]
stocks[1:20,]
day1 = c(164, 78.4)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_vline()
?geom_vline
154/2
day1 = c(164, 78.4)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = 164, xend = 164, y  = 78.4, yend = 72)
164/2
day1 = c(164, 78.4)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = 164, xend = 164, y  = 78.4, yend = 77)
stocks[1:20,]
stocks[11,]
stocks[11,]$MSFT.Open
164.35 /2
day1 = c(164, 78.4)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = 164.35, xend = 164.35, y  = 78.4, yend = 77.175)
day1 = c(164, 78.4)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = 164.35, xend = 164.35, y  = 78.4, yend = 77.175, color = 'red')
predictMSFT = function(x) {
return(-5 + (0.5*x))
}
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = c(164.35, 163), xend = c(164.35, 163), y  = c(78.4, 79), yend = c(77.175, 76), color = 'red')
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
predictAAPL(stocks$MSFT.Open)
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
predictAAPL(stocks$MSFT.Open[1:20])
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = 164.35, xend = 164.35, y  = 78.4, yend = 77.175, color = 'red')
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
predictAAPL(stocks$MSFT.Open[1:20])
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
x = stocks$MSFT.Open[1:20]
y = stocks$AAPL.Open[1:20]
yHat = predictAAPL(x)
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
xPoints = stocks$MSFT.Open[1:20]
yPoints = stocks$AAPL.Open[1:20]
yHat = predictAAPL(x)
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
xPoints = stocks$MSFT.Open[1:20]
yPoints = stocks$AAPL.Open[1:20]
yHat = predictAAPL(x)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = xPoints, xend = xPoints, y  = yPoints, yend = yHat, color = 'red')
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
xPoints = stocks$MSFT.Open[1:20]
yPoints = stocks$AAPL.Open[1:20]
yHat = predictAAPL(xPoints)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5, color = 'blue') +
geom_segment(x = xPoints, xend = xPoints, y  = yPoints, yend = yHat, color = 'red')
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
xPoints = stocks$MSFT.Open[1:20]
yPoints = stocks$AAPL.Open[1:20]
yHat = predictAAPL(xPoints)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = xPoints, xend = xPoints, y  = yPoints, yend = yHat, color = 'darkred')
predictAAPL = function(x) {
return(-5 + (0.5*x))
}
xPoints = stocks$MSFT.Open[1:20]
yPoints = stocks$AAPL.Open[1:20]
yHat = predictAAPL(xPoints)
stocks %>%
slice(1:20) %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw() +
geom_abline(slope = 0.5, intercept = -5) +
geom_segment(x = xPoints, xend = xPoints, y  = yPoints, yend = yHat, color = 'red')
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stocks_subset = stocks %>%
slice(1:20)
stocks_subset %>%
ggplot(aes(x = MSFT.Open, y = AAPL.Open)) +
geom_point() +
labs(x = "MSFT Open", y = "AAPL Open", title = "Open prices of MSFT and AAPL January 2020") +
theme_bw()
# more code here
build_site()
serve_site()
stop_server()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
