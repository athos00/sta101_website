geom_line(aes(x = as.Date(date), y = MSFT_log_return))
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
startDate = '2001-01-03'
endDate = "2005-12-30"
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open)) %>%
select(date, AAPL_log_return, MSFT_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return)
cor(stocks[-date])
stocks[-c("date")]
stocks[-date,]
stocks[-date]
stocks[,-date]
stocks[,- "date"]
stocks[-"date"]
stocks[-c(1)]
cor(stocks[-c(1)])
cor(stocks[-1])
# how to make a QQ plot in R
x = rnorm(100, 50, 25)
y = rnorm(100, 50, 25)
# qqplot function in r package
qqplot(x, y, xlab = "test x", ylab = "test y", main = "Q-Q Plot")
?qqplot
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
left_join(ADBE, by = "date") %>%
left_join(AMD, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open),
ADBE_log_return = log(ADBE.Close / ADBE.Open),
AMD_log_return = log(AMD.Close / AMD.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return,
ADBE_log_return,
AMD_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
cor(stocks$AAPL_log_return, stocks$ADP_log_return)
cor(stocks[-1])
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
library(tidymodels)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return, ADBE_log_return, AMD_log_return, data = stocks)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return, ADBE_log_return, AMD_log_return, data = stocks)
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
left_join(ADBE, by = "date") %>%
left_join(AMD, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open),
ADBE_log_return = log(ADBE.Close / ADBE.Open),
AMD_log_return = log(AMD.Close / AMD.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return,
ADBE_log_return,
AMD_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
cor(stocks$AAPL_log_return, stocks$ADP_log_return)
cor(stocks[-1])
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return, ADBE_log_return, AMD_log_return, data = stocks)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return, AMD_log_return, data = stocks)
stocks
names(stocks)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return + ADBE_log_return + AMD_log_return, data = stocks)
# decompose(AAPL$AAPL.Volume)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return + ADP_log_return + ADBE_log_return + AMD_log_return, data = stocks)
stock_fit
# decompose(AAPL$AAPL.Volume)
glimpse(stock_fit)
glance(stock_fit)
stock_fit$fit
View(stock_fit)
glance(stock_fit)
stock_fit$fit
stock_fit %>%
tidy()
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
DELL = getTicker("DELL")
DELL = getTicker("DELL")
GTW = getTicker("GTW")
ORCL = getTicker("ORCL")
IBM = getTicker("IBM")
GTW = getTicker("GTW")
DELL = getTicker("DELL")
GTW = getTicker("GTW")
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return +
ADBE_log_return + IBM_log_return +
ORCL_log_return, data = stocks)
#DELL = getTicker("DELL")
#GTW = getTicker("GTW")
IBM = getTicker("IBM")
library(tidyquant)
startDate = '2001-01-03'
endDate = "2005-12-30"
# AAPL = as.data.frame(getSymbols("AAPL", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
#
# AAPL = AAPL %>%
#   rownames_to_column( "date")
#
# MSFT = as.data.frame(getSymbols("MSFT", from = '2010-01-01',
#            to = "2018-03-01",warnings = FALSE,
#            auto.assign = FALSE))
getTicker = function(ticker) {
x = as.data.frame(getSymbols(ticker, from = startDate,
to = endDate,warnings = FALSE,
auto.assign = FALSE))
# open_index = which(str_detect(colnames(ticker), "Open") == TRUE)
# close_index = which(str_detect(colnames(ticker), "Close") == TRUE)
#
# get(ticker)[paste0(ticker, ".Open")]
x = x %>%
rownames_to_column("date")
return(x)
}
MSFT = getTicker("MSFT")
AAPL = getTicker("AAPL")
ADP = getTicker("ADP")
ADBE = getTicker("ADBE")
AMD = getTicker("AMD")
#DELL = getTicker("DELL")
#GTW = getTicker("GTW")
IBM = getTicker("IBM")
ORCL = getTicker("ORCL")
stocks = MSFT %>%
left_join(AAPL, by = "date") %>%
left_join(ADP, by = "date") %>%
left_join(ADBE, by = "date") %>%
left_join(AMD, by = "date") %>%
#left_join(DELL, by = "date") %>%
#left_join(GTW, by = "date") %>%
left_join(IBM, by = "date") %>%
left_join(ORCL, by = "date") %>%
mutate(AAPL_log_return = log(AAPL.Close / AAPL.Open),
MSFT_log_return = log(MSFT.Close / MSFT.Open),
ADP_log_return = log(ADP.Close / ADP.Open),
ADBE_log_return = log(ADBE.Close / ADBE.Open),
AMD_log_return = log(AMD.Close / AMD.Open),
#DELL_log_return = log(DELL.Close, DELL.Open),
#GTW_log_return = log(GTW.Close, GTW.Open),
IBM_log_return = log(IBM.Close, IBM.Open),
ORCL_log_return = log(ORCL.Close, ORCL.Open)) %>%
select(date,
AAPL_log_return,
MSFT_log_return,
ADP_log_return,
ADBE_log_return,
AMD_log_return,
#DELL_log_return,
#GTW_log_return,
IBM_log_return,
ORCL_log_return)
stocks %>%
ggplot(aes(x = as.Date(date), y = AAPL_log_return)) +
geom_line() +
scale_x_date(date_labels = "%m/%Y") +
geom_line(aes(x = as.Date(date), y = MSFT_log_return), color = 'steelblue')
cor(stocks$AAPL_log_return, stocks$MSFT_log_return)
cor(stocks$AAPL_log_return, stocks$ADP_log_return)
cor(stocks[-1])
# as.data.frame(AAPL) %>%
#   mutate(date = as.Date(rownames(as.data.frame(AAPL))))
#opens = AAPL$AAPL.Open
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return +
ADBE_log_return + IBM_log_return +
ORCL_log_return, data = stocks)
stock_fit
# decompose(AAPL$AAPL.Volume)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return +
ADBE_log_return + IBM_log_return +
ORCL_log_return, data = stocks)
stock_fit %>%
tidy()
# decompose(AAPL$AAPL.Volume)
library(tidymodels)
stock_fit = linear_reg() %>%
set_engine("lm") %>%
fit(MSFT_log_return ~ AAPL_log_return +
ADBE_log_return + IBM_log_return +
ORCL_log_return, data = stocks)
stock_fit %>%
tidy()
stock_fit %>%
glance()
# decompose(AAPL$AAPL.Volume)
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site9)
build_site()
serve_site()
stop_server()
build_site()
serve_site()
8 + 7 + 7 + 4
25
9 + 7 + 6 + 4
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
read.table("https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/DVS/natality/Nat2020us.zip", nrows=10, header=T, quote="\"", sep=",")
read.table(unz("https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/DVS/natality/Nat2020us.zip"), nrows=10, header=T, quote="\"", sep=",")
master <- as.character(unzip("https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/DVS/natality/Nat2020us.zip", list = TRUE)$Name)
unzip("https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/DVS/natality/Nat2020us.zip", list = TRUE)
?download.file
library(data.table)
t <- fread("curl https://ftp.cdc.gov/pub/Health_Statistics/NCHS/Datasets/DVS/natality/Nat2020us.zip | funzip")
ls
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
stop_server()
build_site()
serve_site()
library(emo)
emo::clock()
emo::ji("poop")
emo::ji("fisher")
emo::ji("moon")
emo::ji("book")
?emo::jis
emo::jis
View(emo::jis)
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
library(tidyverse)
library(sf)
mpg
nc <- st_read("data/nc_regvoters.shp", quiet = TRUE)
nc
nc <- st_read("data/nc_regvoters.shp", quiet = TRUE)
ggplot(nc) +
geom_sf() +
labs(title = "North Carolina counties")
ggplot(nc) +
geom_sf(color = "darkgreen", size = 1.5) +
labs(title = "North Carolina counties with theme and aesthetics") +
theme_bw()
ggplot(nc) +
geom_sf(aes(fill = total)) +
scale_fill_gradient(low = "#fee8c8", high = "#7f0000") +
labs(title = "The Triangle and Charlotte have the Most Voters",
fill = "# cases") +
theme_bw()
ggplot(nc) +
geom_sf(aes(fill = total)) +
scale_fill_gradient(low = "#fee8c8", high = "#7f0000") +
labs(title = "The Triangle and Charlotte have the Most Voters",
fill = "# cases") +
theme_bw() +
theme(text = element_text(size = 20))
ggsave("NC.png")
ggplot(nc) +
geom_sf(aes(fill = total)) +
scale_fill_gradient(low = "#fee8c8", high = "#7f0000") +
labs(title = "The Triangle and Charlotte have the Most Voters",
fill = "# cases") +
theme_bw() +
theme(text = element_text(size = 30))
ggsave("NC.png")
ggplot(nc) +
geom_sf(aes(fill = total)) +
scale_fill_gradient(low = "#fee8c8", high = "#7f0000") +
labs(title = "The Triangle and Charlotte have the Most Voters",
fill = "# cases") +
theme_bw() +
theme(text = element_text(size = 30))
ggsave("NC.png")
stop_server()
build_site()
serve_site()
stop_server()
stop_server()
