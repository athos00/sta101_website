s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = c(1,2,3,4,5,6)
s = sample(outcomes, size = 5, replace = TRUE)
sum(s == 2) == 2
outcomes = 1:6
one.die = function() {
dice = sample(outcomes, size = 1, replace = TRUE)
}
one.die()
outcomes = 1:6
roll.die = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.die()
outcomes = 1:6
roll.die = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
roll.die
outcomes = 1:6
roll.die = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
roll.die()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
one.roll()
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
replicate(one.roll(), 1000)
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
replicate(1000, one.roll())
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
one.roll()
}
replicate(1000, one.roll())
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
replicate(5, one.roll())
}
replicate(5, one.roll())
x = replicate(5, one.roll())
count(x, 2)
x
x == 2
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
rolls = replicate(5, one.roll())
return(sum(rolls == 2) == 1)
}
samples = replicate(10000, five.rolls())
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
rolls = replicate(5, one.roll())
return(sum(rolls == 2) == 1)
}
samples = replicate(10000, five.rolls())
samples
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
rolls = replicate(5, one.roll())
return(sum(rolls == 2) == 1)
}
samples = replicate(10000, five.rolls())
mean(samples)
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
rolls = replicate(5, one.roll())
return(sum(rolls == 2) == 2)
}
samples = replicate(10000, five.rolls())
mean(samples)
outcomes = 1:6
one.roll = function() {
roll = sample(outcomes, size = 1, replace = TRUE)
return(roll)
}
five.rolls = function() {
rolls = replicate(5, one.roll())
return(sum(rolls == 2) == 1)
}
samples = replicate(10000, five.rolls())
mean(samples)
blogdown:::preview_site()
build_site()
serve_site()
library(blogdown)
build_site()
serve_site()
stop_server()
build_site()
serve_site()
park = parkinsons %>%
mutate(name = str_remove_all(name, "_[^_]+$"))
parkinsons = read_csv("https://sta101.github.io/static/labs/data/parkinsons.csv")
park = parkinsons %>%
mutate(name = str_remove_all(name, "_[^_]+$"))
park
write_csv("~/Desktop/teaching/sta101/static/static/labs/data/parkinsons_cleaned.csv")
write_csv(park, "~/Desktop/teaching/sta101/static/static/labs/data/parkinsons_cleaned.csv")
parkinsons = park
parkinsons
stop_server()
build_site()
serve_site()
parkinsons %>%
group_by(status) %>%
count()
parkinsons %>%
count(name)
parkinsons %>%
count(name, status)
parkinsons %>%
filter(status == 0)
parkinsons %>%
filter(status == 0) %>%
count(name)
parkinsons %>%
group_by(name) %>%
filter(status == 0) %>%
parkinsons %>%
group_by(name) %>%
filter(status == 0)
parkinsons %>%
filter(status == 0) %>%
count(name)
parkinsons %>%
filter(status == 0) %>%
count(name) %>%
select(name)
parkinsons %>%
filter(status == 0) %>%
count(name) %>%
select(name) %>%
kable()
library(tidyverse)
library(tidymodels)
library(knitr)
parkinsons %>%
filter(status == 0) %>%
count(name) %>%
select(name) %>%
kable()
parkinsons %>%
filter(status == 0) %>%
count(name) %>%
select(name, status) %>%
kable()
parkinsons %>%
filter(status == 0) %>%
count(name, status) %>%
select(name, status) %>%
kable()
parkinsons %>%
filter(status == 0) %>%
count(name) %>%
select(name)
parkinsons %>%
count(name, status)
parkinsons %>%
count(status)
parkinsons %>%
count(status, name) %>%
summarize(prob = n / nrow(parkinso))
parkinsons %>%
count(name, status) %>%
summarize(prob = n / nrow(parkinso))
parkinsons %>%
count(name, status)
parkinsons %>%
group_by(name) %>%
count(status)
parkinsons %>%
group_by(name) %>%
count(status) %>%
count(status)
parkinsons %>%
count(status)
parkinsons %>%
count(status) %>%
mutate(prob_obs = n / nrow(parkinsons))
parkinsons %>%
count(status) %>%
mutate(prob_obs = n / sum(n))
parkinsons %>%
count(status) %>%
mutate(prob_obs = n / sum(n))
parkinsons %>%
count(status, name)
parkinsons %>%
count(status) %>%
mutate(prob_obs = n / sum(n))
parkinsons %>%
count(status, name) %>%
count(status)
parkinsons %>%
count(status) %>%
mutate(prob_obs = n / sum(n))
parkinsons %>%
count(status, name) %>%
count(status) %>%
mutate(prob_individual = n / sum(n))
parkinsons
parkinsons %>%
group_by(status) %>%
summarize(mean(jitter),
mean(shimmer),
mean(PPE),
mean(HNR))
parkinsons %>%
group_by(status) %>%
summarize(mean(shimmer))
parkinsons %>%
mutate(highAmplitude = shimmer >= 30) %>%
count(status, shimmer)
parkinsons %>%
mutate(highAmplitude = shimmer >= 30) %>%
count(status, highAmplitude)
range(parkinsons$shimmer)
parkinsons %>%
mutate(highAmplitude = shimmer >= .30) %>%
count(status, highAmplitude) %>%
mutate(prob = n / )
parkinsons %>%
mutate(highAmplitude = shimmer >= .30) %>%
count(status, highAmplitude)
parkinsons %>%
mutate(highAmplitude = shimmer >= .30) %>%
count(status, highAmplitude) %>%
group_by(status) %>%
mutate(prob = n / sum(n))
parkinsons
range(parkinsons$HNR)
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR < 15) %>%
mean(HNR_less_15)
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR < 15)
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR > 25)
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR > 25) %>%
summarize(mean(HNR_less_15))
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR >= 25) %>%
summarize(mean(HNR_less_15))
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR < 25) %>%
summarize(mean(HNR_less_15))
parkinsons %>%
filter(status == 0) %>%
mutate(HNR_less_15 = HNR > 25) %>%
summarize(mean(HNR_less_15))
test_group = c("phon_R01_S07", "phon_R01_S10",
"phon_R01_S13", "phon_R01_S17",
"phon_R01_S01", "phon_R01_S02",
"phon_R01_S04", "phon_R01_S05")
test_p = park %>%
filter(name %in% test_group)
train_p = park %>%
anti_join(test_p, by = c("name"))
nrow(train_p)
test_group = c("phon_R01_S07", "phon_R01_S10",
"phon_R01_S13", "phon_R01_S17",
"phon_R01_S01", "phon_R01_S02",
"phon_R01_S04", "phon_R01_S05")
test_p = parkinsons %>%
filter(name %in% test_group)
train_p = parkinsons %>%
anti_join(test_p, by = c("name"))
nrow(train_p)
train_p
test_group = c("phon_R01_S07", "phon_R01_S10",
"phon_R01_S13", "phon_R01_S17",
"phon_R01_S01", "phon_R01_S02",
"phon_R01_S04", "phon_R01_S05")
test = parkinsons %>%
filter(name %in% test_group)
train = parkinsons %>%
anti_join(test, by = c("name"))
nrow(train_p)
train
test
parkinsons %>%
filter(name !%in% test_group)
parkinsons %>%
filter(name !(%in%) test_group)
parkinsons %>%
filter(!(name %in% test_group))
test_group = c("phon_R01_S07", "phon_R01_S10",
"phon_R01_S13", "phon_R01_S17",
"phon_R01_S01", "phon_R01_S02",
"phon_R01_S04", "phon_R01_S05")
test = parkinsons %>%
filter(name %in% test_group)
train = parkinsons %>%
filter(!(name %in% test_group))
nrow(train)
test_group = c("phon_R01_S07", "phon_R01_S10",
"phon_R01_S13", "phon_R01_S17",
"phon_R01_S01", "phon_R01_S02",
"phon_R01_S04", "phon_R01_S05")
test = parkinsons %>%
filter(name %in% test_group)
train = parkinsons %>%
filter(!(name %in% test_group))
nrow(train)
nrow(test)
pd_fit = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(status) ~ HNR + PPE + jitter + shimmer , data = train_p, family = "binomial")
pd_fit %>%
tidy()
pd_fit = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(status) ~ HNR + PPE + jitter + shimmer , data = train, family = "binomial")
pd_fit %>%
tidy()
prediction = predict(pd_fit, test_p, type = "prob")
test_result = test_p %>%
mutate(predicted_prob_pd = prediction$.pred_1) %>%
mutate(pd_50 = ifelse(predicted_prob_pd > 0.5, 1, 0),
pd_75 = ifelse(predicted_prob_pd > 0.75, 1, 0),
pd_90 = ifelse(predicted_prob_pd > 0.9, 1, 0))
accuracy = test_result %>%
select(status, pd_50, pd_75, pd_90) %>%
count(status, pd_50, pd_75, pd_90)
accuracy
prediction = predict(pd_fit, test_p, type = "prob")
test_result = test %>%
mutate(predicted_prob_pd = prediction$.pred_1) %>%
mutate(pd_50 = ifelse(predicted_prob_pd > 0.5, 1, 0),
pd_75 = ifelse(predicted_prob_pd > 0.75, 1, 0),
pd_90 = ifelse(predicted_prob_pd > 0.9, 1, 0))
accuracy = test_result %>%
select(status, pd_50, pd_75, pd_90) %>%
count(status, pd_50, pd_75, pd_90)
accuracy
prediction = predict(pd_fit, test, type = "prob")
test_result = test %>%
mutate(predicted_prob_pd = prediction$.pred_1) %>%
mutate(pd_50 = ifelse(predicted_prob_pd > 0.5, 1, 0),
pd_75 = ifelse(predicted_prob_pd > 0.75, 1, 0),
pd_90 = ifelse(predicted_prob_pd > 0.9, 1, 0))
accuracy = test_result %>%
select(status, pd_50, pd_75, pd_90) %>%
count(status, pd_50, pd_75, pd_90)
accuracy
28 + 18 + 4
stop_server()
build_site()
serve_site()
stop_server()
stop_server()
build_site()
serve_site()
