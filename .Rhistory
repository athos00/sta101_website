geom_point()
grip %>%
ggplot(aes(x = age, y = grip, color = surgery_history)) +
geom_point()
grip %>%
ggplot(aes(x = age, y = grip, color = as.factor(surgery_history))) +
geom_point()
grip %>%
ggplot(aes(x = age, y = grip, color = sex)) +
geom_point()
grip %>%
ggplot(aes(x = weight(), y = grip, color = sex)) +
geom_point()
grip %>%
ggplot(aes(x = weight, y = grip, color = sex)) +
geom_point()
grip %>%
ggplot(aes(x = age, y = grip, color = sex)) +
geom_point()
grip %>%
ggplot(aes(x = age, y = grip, color = as.factor(sex))) +
geom_point()
grip %>%
ggplot(aes(x = weight(), y = grip, color = as.factor(sex))) +
geom_point()
grip %>%
ggplot(aes(x = weight, y = grip, color = as.factor(sex))) +
geom_point()
grip %>%
ggplot(aes(x = height, y = grip, color = as.factor(sex))) +
geom_point()
x = read_csv("https://socialsciences.mcmaster.ca/jfox/Books/Applied-Regression-2E/datasets/SLID-Ontario.txt")
x
library(car)
SLID
names(SLID)
glimpse(SLID)
SLID %>%
ggplot(aes(x = education, y = wages))
SLID %>%
ggplot(aes(x = education, y = wages)) +
geom_point()
SLID %>%
ggplot(aes(x = education, y = wages, color = sex)) +
geom_point()
SLID %>%
ggplot(aes(x = education, y = wages, color = language)) +
geom_point()
SLID %>%
ggplot(aes(x = age, y = wages, color = language)) +
geom_point()
SLID %>%
ggplot(aes(x = age, y = wages, color = sex)) +
geom_point()
pokemon = read_csv("~/Desktop/teaching/sta101/static/static/appex/data/pokemon150.csv")
pokemon
pokemon
glimpse(pokemon)
pokemon %>%
ggplot(aes(x = weight_kg, y = total_points, color = is_legendary)) %>%
geom_point()
pokemon %>%
ggplot(aes(x = weight_kg, y = total_points, color = is_legendary)) +
geom_point()
bass = read_csv("~/Desktop/teaching/sta101/static/static/appex/data/mercury.csv")
bass
ggplot(aes(x = weight, y = mercury, color = river)) +
geom_point()
bass %>%
ggplot(aes(x = weight, y = mercury, color = river)) +
geom_point()
bass %>%
ggplot(aes(x = weight, y = mercury, color = river)) +
geom_point() +
geom_smooth(method = 'lm')
bass %>%
ggplot(aes(x = weight, y = mercury, color = as.factor(river))) +
geom_point() +
geom_smooth(method = 'lm')
bass
bass %>%
count(station)
bass %>%
ggplot(aes(x = length, y = mercury, color = as.factor(river))) +
geom_point() +
geom_smooth(method = 'lm')
bass %>%
ggplot(aes(x = length, y = mercury, color = as.factor(river))) +
geom_point() +
geom_smooth(method = 'lm') +
geom_hline(yintercept = 0.46)
bass %>%
ggplot(aes(x = weight, y = mercury, color = as.factor(river))) +
geom_point() +
geom_smooth(method = 'lm') +
geom_hline(yintercept = 0.46)
bass %>%
ggplot(aes(x = length, y = mercury, color = as.factor(river))) +
geom_point() +
geom_smooth(method = 'lm') +
geom_hline(yintercept = 0.46)
bass
bass %>%
ararnge(desc(length))
bass %>%
arrange(desc(length))
bass %>%
arrange((length))
?penguins
main_fit = linear_reg() %>%
set_engine("lm") %>%
fit(body_mass_g ~ bill_length_mm + island, data = penguins)
library(palmerpenguins)
main_fit = linear_reg() %>%
set_engine("lm") %>%
fit(body_mass_g ~ bill_length_mm + island, data = penguins)
main_fit %>%
tidy()
main_fit = linear_reg() %>%
set_engine("lm") %>%
fit(body_mass_g ~ bill_length_mm + island, data = penguins)
main_fit %>%
tidy()
interaction_fit = linear_reg() %>%
set_engine("lm") %>%
fit(body_mass_g ~ bill_length_mm * island, data = penguins)
interaction_fit %>%
tidy()
# main_fit = linear_reg() %>%
#   set_engine("lm") %>%
#   fit(body_mass_g ~ bill_length_mm + island, data = penguins)
#   main_fit %>%
#   tidy()
b0 = 1225.79107
bD = -919.07448
bT = -523.29201
bBill = 77.11933
# show_col(hue_pal()(3))
penguins %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = island)) +
geom_point() +
theme_bw() +
geom_abline(intercept = b0, slope = 77.11933, color = "#F8766D", lwd = 1) +
geom_abline(intercept = b0 + bD, slope = 77.11933, color = "#00BA38", lwd = 1) +
geom_abline(intercept = b0 + bT, slope = 77.11933, color = "#619CFF", lwd = 1) +
labs(x = "Bill length (mm)",
y = "Body mass (g)",
title = "Island main effect")
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
mpg
library(palmerpenguins)
penguins
raw_df <- read_csv("2022/2022-07-05/clean_2000_2018.csv.zip")
rent <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv')
RENT
rent
x = read_csv("https://github.com/fisher-group/sta101/tree/main/data%20sets/USbirth/USbirth.csv")
x = read_csv("~/Desktop/teaching/sta101/static/static/appex/data/USbirth.csv")
x
x
View(x)
d <- read_csv("https://rmorsomme.github.io/website/projects/training_set.csv")
d <- read_csv("https://rmorsomme.github.io/website/projects/training_set.csv")
m <- lm(mother_bmi ~ mother_weight_prepregnancy, data = d)
m
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150) # new data
predict(m, new_data)
d
m <- lm(mother_bmi ~ mother_weight_prepregnancy, data = d)
m
m2 = linear_reg() %>%
set_engine("lm") %>%
fit(mother_bmi ~ mother_weight_prepgnancy, data = d)
library(tidymodels)
m <- lm(mother_bmi ~ mother_weight_prepregnancy, data = d)
m
m2 = linear_reg() %>%
set_engine("lm") %>%
fit(mother_bmi ~ mother_weight_prepregnancy, data = d)
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150) # new data
predict(m2, new_data)
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150) # new data
predict(m, new_data)
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150) # new data
predict(m2, new_data)
d
m <- lm(mother_bmi ~ mother_weight_prepregnancy, data = d)
m
m2 = linear_reg() %>%
set_engine("lm") %>%
fit(mother_bmi ~ mother_weight_prepregnancy + daily_cigarette_trimester_3, data = d)
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150, daily_cigarette_trimester_3 = 0) # new data
predict(m2, new_data)
birth
x
birth = x
sample(birth, 3000, replace = F)
birth %>%
slice_sample(n = 3000)
write_csv(birth, "~/Desktop/teaching/sta101/static/static/appex/data/USbirth.csv")
birth = birth %>%
slice_sample(n = 3000)
write_csv(birth, "~/Desktop/teaching/sta101/static/static/appex/data/USbirth.csv")
birth
x
x %>%
slice_sample(n = 1000)
testUSbirth %>%
slice_sample(n = 1000)
testUSbirth = x %>%
slice_sample(n = 1000)
testUSbirth
write_csv(testUSbirth, "~/Desktop/teaching/sta101/static/static/appex/data/testUSbirth.csv")
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150, daily_cigarette_trimester_3 = 0) # new data
predict(m2, new_data)
# load("my_predictive_model.RDATA")
new_data <- tibble(mother_weight_prepregnancy = 150, daily_cigarette_trimester_3 = 0) # new data
c(new_data, predict(m2, new_data))
stop_server()
build_site()
serve_site()
names(x)
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight, mother_age, data = births)
births
names(births)
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight ~ mother_age, data = births)
# predict based on new data
predict_test = test_data %>%
mutate(myPrediction = predict(myPredictiveModel, test_data))
# compute sum squared error
predict_test %>%
mutate(squared_error = (newborn_birth_weight - myPredictiveModel)^2) %>%
summarize(sse = sum(squared_error))
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight ~ mother_age, data = births)
# predict based on new data
predict_test = test_data %>%
mutate(myPrediction = predict(myPredictiveModel, test_data))
# compute sum squared error
predict_test %>%
mutate(squared_error = (newborn_birth_weight - myPredictiveModel)^2) #%>%
predict_test
predict_test %>%
mutate(squared_error = newborn_birth_weight)
x = predict(myPredictiveModel, test_data)
cx
x
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight ~ mother_age, data = births)
# predict based on new data
predict_test = test_data %>%
mutate(myPrediction = predict(myPredictiveModel, test_data)$.pred)
# compute sum squared error
predict_test %>%
mutate(squared_error = (newborn_birth_weight - myPredictiveModel)^2) #%>%
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight ~ mother_age, data = births)
# predict based on new data
predict_test = test_data %>%
mutate(myPrediction = predict(myPredictiveModel, test_data)$.pred)
# compute sum squared error
predict_test %>%
mutate(squared_error = (newborn_birth_weight - myPrediction)^2) #%>%
# summarize(sse = sum(squared_error))
# load data
births = read_csv("https://sta101.github.io/static/appex/data/trainUSbirth.csv")
test_data = read_csv("https://sta101.github.io/static/appex/data/testUSbirth.csv")
# fit a model with mother_age as a predictor of newborn_birth_weight
myPredictiveModel = linear_reg() %>%
set_engine("lm") %>%
fit(newborn_birth_weight ~ mother_age, data = births)
# predict based on new data
predict_test = test_data %>%
mutate(myPrediction = predict(myPredictiveModel, test_data)$.pred)
# compute sum squared error
predict_test %>%
mutate(squared_error = (newborn_birth_weight - myPrediction)^2) %>%
summarize(sse = sum(squared_error))
library(tidyverse)
library(tidymodels)
library(viridis)
passwords = read_csv("https://sta101.github.io/static/appex/data/passwords.csv")
glimpse(passwords)
passwords %>%
count(category) %>%
arrange(desc(n))
password2 %>%
count(category, less_than_day) %>%
arrange(desc(n)) %>%
group_by(category) %>%
mutate(proportion_cracked_less_than_day = n/sum(n)) %>%
filter(less_than_day == TRUE) %>%
select(category, proportion_cracked_less_than_day) %>%
arrange(desc(proportion_cracked_less_than_day))
password2 = passwords %>%
mutate(less_than_day = ifelse(time_unit %in% c("hours", "minutes", "seconds"), TRUE, FALSE))
password2 %>%
count(category, less_than_day) %>%
arrange(desc(n)) %>%
group_by(category) %>%
mutate(proportion_cracked_less_than_day = n/sum(n)) %>%
filter(less_than_day == TRUE) %>%
select(category, proportion_cracked_less_than_day) %>%
arrange(desc(proportion_cracked_less_than_day))
passwords %>%
filter(!is.na(offline_crack_sec)) %>%
summarize(mean_time = mean(offline_crack_sec),
sd_time = sd(offline_crack_sec))
names(passwords)
linear_reg()
set_engine("lm") %>%
fit(offline_crack_sec ~ rank, data = passwords)
passwords$rank
linear_reg()
set_engine("lm") %>%
fit(offline_crack_sec ~ rank, data = passwords)
linear_reg()
set_engine("lm") %>%
fit(offline_crack_sec ~ rank, data = passwords)
library(tidyverse)
library(tidymodels)
library(viridis)
linear_reg()
set_engine("lm") %>%
fit(offline_crack_sec ~ rank, data = passwords)
linear_reg() %>%
set_engine("lm") %>%
fit(offline_crack_sec ~ rank, data = passwords)
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_scatter()
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point()
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point() +
geom_smooth(method = "lm", se = F)
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Password rank", y = "Offline crack time in seconds", title = "Decipher time vs password ranking")
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Password rank", y = "Offline crack time in seconds", title = "Decipher time vs password ranking") +
ylim(c(0,10))
library(tidyverse)
library(tidymodels)
library(viridis)
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Password rank", y = "Offline crack time in seconds", title = "Decipher time vs password ranking") +
ylim(c(0,10))
passwords %>%
ggplot(aes(x = rank, y = offline_crack_sec)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
labs(x = "Password rank", y = "Offline crack time in seconds", title = "Decipher time vs password ranking")
stop_server()
build_site()
serve_site()
library(blogdown)
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
?boot
library(boot)
?boot
stop_server()
build_site()
serve_site()
spam = read_csv("https://sta101.github.io/static/appex/data/spam.csv")
glimpse(spam)
?inv.logit
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
nrow(spam)
?slice_sample
set.seed(6)
spam %>%
slice_sample(n = 4000)
set.seed(6)
sampleIndices = sample.int(n = nrow(spam), size = 2000, replace = F)
train = data[sampleIndices, ]
set.seed(6)
sampleIndices = sample.int(n = nrow(spam), size = 2000, replace = F)
train = spam[sampleIndices, ]
test  = spam[-sampleIndices, ]
set.seed(6)
sampleIndices = sample.int(n = nrow(spam), size = 2000, replace = F)
train = spam[sampleIndices, ]
test  = spam[-sampleIndices, ] %>%
slice_sample(n = 2000)
# code here
#example (delete this):
myModel = linear_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + capitalTotal, data = spam, family = "binomial")
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + capitalTotal, data = spam, family = "binomial")
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + capitalTotal, data = train, family = "binomial")
prediction = test %>%
mutate(myModelPrediction = predict(myModel, test)$.pred)
prediction = test %>%
mutate(myModelPrediction = predict(myModel, test)$.pred)
prediction
names(spam)
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + capitalTotal + ,address, data = train, family = "binomial")
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + capitalTotal + address, data = train, family = "binomial")
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you  + address, data = train, family = "binomial")
# code here
#example (delete this):
myModel = logistic_reg() %>%
set_engine("glm") %>%
fit(as.factor(type) ~ you + address, data = train, family = "binomial")
prediction = test %>%
mutate(myModelPrediction = predict(myModel, test)$.pred)
prediction
predict(myModel, test)
prediction = test %>%
mutate(myModelPrediction = predict(myModel, test)$.pred_class)
prediction
# code here
prediction %>%
count(type, myPrediction)
# code here
prediction %>%
count(type, myModelPrediction)
# code here
prediction %>%
count(type, myModelPrediction) %>%
mutate(proportion = n / nrow(prediction))
stop_server()
build_site()
serve_site()
