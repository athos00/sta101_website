null_dist =
coin_flips %>%
specify(response = one_flip, success = "H") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
obs_stat = 26/30
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
null_dist %>%
get_p_value(obs_stat, direction = "right")
stop_server()
build_site()
serve_site()
push_pull
push_pull = read_csv("https://sta101.github.io/static/appex/data/push_pull.csv")
push_pull
View(push_pull)
# find observed statistic
obs_mean_age = push_pull %>%
drop_na(age) %>%
summarize(meanAge = mean(age)) %>%
pull()
# subtract observed_mean - desired_mean from age
age_and_null = push_pull %>%
select(age) %>%
drop_na(age) %>%
mutate(nullAge = age - (obs_mean_age - 30))
# show data frame
age_and_null
# show the means of each column
age_and_null %>%
summarize(meanAge = mean(age),
mean_nullAge = mean(nullAge))
# find observed statistic
obs_mean_age = push_pull %>%
drop_na(age) %>%
summarize(meanAge = mean(age)) %>%
pull()
# subtract observed_mean - desired_mean from age
age_and_null = push_pull %>%
select(age) %>%
drop_na(age) %>%
mutate(nullAge = age - (obs_mean_age - 30))
# show data frame
age_and_null
# show the means of each column
age_and_null %>%
summarize(meanAge = mean(age),
mean_nullAge = mean(nullAge))
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = sim_num, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = sim_num, type = "bootstrap") %>%
calculate(stat = "mean")
# find observed statistic
obs_mean_age = push_pull %>%
drop_na(age) %>%
summarize(meanAge = mean(age)) %>%
pull()
# subtract observed_mean - desired_mean from age
age_and_null = push_pull %>%
select(age) %>%
drop_na(age) %>%
mutate(nullAge = age - (obs_mean_age - 30))
# show data frame
age_and_null
# show the means of each column
age_and_null %>%
summarize(meanAge = mean(age),
mean_nullAge = mean(nullAge))
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = sim_num, type = "bootstrap") %>%
calculate(stat = "mean")
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
# get observed statistic
obs_stat = obs_mean_age
p_value = null_dist %>%
get_p_value(obs_stat, direction = "right")
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
# get observed statistic
obs_stat = obs_mean_age
p_value = null_dist %>%
get_p_value(obs_stat, direction = "right")
push_pull
View(push_pull)
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
# get observed statistic
obs_stat = obs_mean_age
p_value = null_dist %>%
get_p_value(obs_stat, direction = "right")
p_value
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
# get observed statistic
obs_stat = obs_mean_age
p_value = null_dist %>%
get_p_value(obs_stat, direction = "right")
set.seed(3)
# simulate null
null_dist = push_pull %>%
specify(response = age) %>%
hypothesize(null = "point", mu = 30) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
# get observed statistic
obs_stat = obs_mean_age
p_value = null_dist %>%
get_p_value(obs_stat, direction = "right")
p_value
set.seed(2022)
null_dist =
coin_flips %>%
specify(response = one_flip, success = "H") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
obs_stat = 26/30
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
null_dist %>%
get_p_value(obs_stat, direction = "right")
stop_server()
build_site()
serve_site()
sleep = read_csv("https://sta101.github.io/static/labs/data/sleep.csv")
sleep
sleep = read_csv("https://sta101.github.io/static/labs/data/sleep.csv")
set.seed(2)
sleep
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS, = sd(TTS)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS, = sd(TTS))
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.025, mean = mean_TTS, sd = sd_TTS)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.025, mean = mean_TTS, sd = sd_TTS)
qnorm(0.975, mean = mean_TTS, sd = sd_TTS)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = sd_TTS)
qnorm(0.95, mean = mean_TTS, sd = sd_TTS)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = sd_TTS)
qnorm(0.95, mean = mean_TTS, sd = sd_TTS)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = sd_TTS)
qnorm(0.95, mean = mean_TTS, sd = sd_TTS)
# alternatively we can use the t-test
tstar = qt(0.05, df = nrow(sleep))
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = sd_TTS)
qnorm(0.95, mean = mean_TTS, sd = sd_TTS)
# alternatively we can use the t-test
tstar = qt(0.05, df = nrow(sleep))
mean_TTS + (tstar * (sd_TTS / sqrt(nrow(sleep))))
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = sd_TTS)
qnorm(0.95, mean = mean_TTS, sd = sd_TTS)
# alternatively we can use the t-test
tstar = qt(0.05, df = nrow(sleep))
mean_TTS + (tstar * (sd_TTS / sqrt(nrow(sleep))))
mean_TTS - (tstar * (sd_TTS / sqrt(nrow(sleep))))
tsar
tstar
qt(0.95, df = nrow(sleep))
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
se = sd_TTS / sqrt(nrow(sleep))
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.05, mean = mean_TTS, sd = se)
qnorm(0.95, mean = mean_TTS, sd = se)
# alternatively we can use the t-test
tstar = qt(0.95, df = nrow(sleep))
mean_TTS + (tstar * se)
mean_TTS - (tstar * se)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
se = sd_TTS / sqrt(nrow(sleep))
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.025, mean = mean_TTS, sd = se)
qnorm(0.975, mean = mean_TTS, sd = se)
# alternatively we can use the t-test
tstar = qt(0.975, df = nrow(sleep))
mean_TTS + (tstar * se)
mean_TTS - (tstar * se)
set.seed(2)
sleep %>%
summarize(mean_TTS = mean(TTS),
sd_TTS = sd(TTS))
mean_TTS = 32.01389
sd_TTS = 16.39434
se = sd_TTS / sqrt(nrow(sleep))
# since the sample size is so large we can probably approximate with qnorm
qnorm(0.025, mean = mean_TTS, sd = se)
qnorm(0.975, mean = mean_TTS, sd = se)
# alternatively we can use the t-test
tstar = qt(0.025, df = nrow(sleep))
mean_TTS + (tstar * se)
mean_TTS - (tstar * se)
set.seed(2)
boot_dist <- sleep %>%
filter(Run > 0) %>%
specify(response = Run) %>%
generate(type = "bootstrap", reps = 10000) %>%
calculate(stat = "mean")
boot_dist  %>%
summarize(lower = quantile(stat, 0),
upper = quantile(stat, 0.90))
null_dist = sleep %>%
mutate(Cal = ifelse(Cal, "Supplement", "No supplement")) %>%
specify(response = TTS, explanatory = Cal) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = 'diff in medians', order = c("Supplement", "No supplement"))
stat_df = sleep %>%
group_by(Cal) %>%
summarize(median_TTS = median(TTS)) %>%
pull(median_TTS)
obs_stat = stat_df[2] - stat_df[1]
null_dist %>%
get_p_value(obs_stat, direction = "left")
set.seed(5)
null_dist = sleep %>%
mutate(Cal = ifelse(Cal, "Supplement", "No supplement")) %>%
specify(response = TTS, explanatory = Cal) %>%
hypothesize(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = 'diff in medians', order = c("Supplement", "No supplement"))
stat_df = sleep %>%
group_by(Cal) %>%
summarize(median_TTS = median(TTS)) %>%
pull(median_TTS)
obs_stat = stat_df[2] - stat_df[1]
null_dist %>%
get_p_value(obs_stat, direction = "left")
set.seed(6)
boot_dist <- sleep %>%
filter(Run > 0) %>%
specify(response = Run) %>%
generate(type = "bootstrap", reps = 10000) %>%
calculate(stat = "median")
boot_dist  %>%
summarize(lower = quantile(stat, 0),
upper = quantile(stat, 0.90))
sleep2 = sleep %>%
mutate(timeAwake = TBT - TST)
sleep2 = sleep %>%
mutate(timeAwake = TBT - TST)
sleep2
set.seed(5)
null_dist = sleep %>%
mutate(Cal = ifelse(Cal, "Supplement", "No supplement")) %>%
specify(response = TTS, explanatory = Cal) %>%
hypothesize(null = "independence") %>%
generate(reps = 5000, type = "permute") %>%
calculate(stat = 'diff in medians', order = c("Supplement", "No supplement"))
stat_df = sleep %>%
group_by(Cal) %>%
summarize(median_TTS = median(TTS)) %>%
pull(median_TTS)
obs_stat = stat_df[2] - stat_df[1]
null_dist %>%
get_p_value(obs_stat, direction = "left")
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 60)
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 60)
sleep3 %>%
summarize(mean(overAnHour))
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 60)
observed_stat = sleep3 %>%
summarize(mean(overAnHour)) %>%
pull()
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 60)
obs_stat = sleep3 %>%
summarize(mean(overAnHour)) %>%
pull()
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 30)
obs_stat = sleep3 %>%
summarize(mean(overAnHour)) %>%
pull()
obs_stat
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 45)
obs_stat = sleep3 %>%
summarize(mean(overAnHour)) %>%
pull()
obs_stat
sleep3 = sleep2 %>%
mutate(overAnHour = timeAwake > 50)
obs_stat = sleep3 %>%
summarize(mean(overAnHour)) %>%
pull()
obs_stat
null_dist =
sleep3 %>%
specify(response = overFiftyMinutes, success = "T") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
sleep3 = sleep2 %>%
mutate(overFiftyMinutes = timeAwake > 50)
obs_stat = sleep3 %>%
summarize(mean(overFiftyMinutes)) %>%
pull()
null_dist =
sleep3 %>%
specify(response = overFiftyMinutes, success = "T") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
null_dist =
sleep3 %>%
specify(response = overFiftyMinutes, success = TRUE) %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
null_dist =
sleep3 %>%
specify(response = overFiftyMinutes, success = "TRUE") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
null_dist %>%
get_p_value(obs_stat, direction = "right")
set.seed(8)
null_dist =
sleep3 %>%
specify(response = overFiftyMinutes, success = "TRUE") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 5000, type = "draw") %>%
calculate(stat = "prop")
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
null_dist %>%
get_p_value(obs_stat, direction = "right")
4 + 2 + 4 + 4 + 6 + 10 + 6 + 3
stop_server()
build_site()
serve_site()
sim_num = 10000
set.seed(1)
# simulate null
null_dist = push_pull %>%
specify(response = pct_pull_inc, explanatory = training) %>%
hypothesize(null = "independence") %>%
generate(reps = sim_num, type = "permute") %>%
calculate(stat = "diff in means", order = c("gtg", "density"))
push_pull = push_pull %>%
mutate(
pct_push_inc = (push2 / push1 ) - 1,
pct_pull_inc = (pull2 / pull1) - 1)
sim_num = 10000
set.seed(1)
# simulate null
null_dist = push_pull %>%
specify(response = pct_pull_inc, explanatory = training) %>%
hypothesize(null = "independence") %>%
generate(reps = sim_num, type = "permute") %>%
calculate(stat = "diff in means", order = c("gtg", "density"))
# observed statistic
obs_stat = .489 - .196
# visualize / get p
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
random_training = sample(push_pull$training, replace = FALSE)
push_pull %>%
select(pct_pull_inc) %>%
mutate(random_training = random_training)
stop_server()
build_site()
serve_site()
stop_server()
stop_server()
stop_server()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
stop_server()
build_site()
serve_site()
set.seed(2022)
null_dist =
coin_flips %>%
specify(response = one_flip, success = "H") %>%
hypothesize(null = "point", p = 0.5) %>%
generate(reps = 10000, type = "draw") %>%
calculate(stat = "prop")
obs_stat = 26/30
visualize(null_dist) +
shade_p_value(obs_stat, direction = "right")
null_dist %>%
get_p_value(obs_stat, direction = "right")
stop_server9)
stop_server()
build_site()
serve_site()
